import { test, expect } from '@playwright/test';
import { loginUser, checkServerStatus, checkPageLoad, findAssignButton } from './helpers/e2e-utils';

test.describe('Admin Permissions and Features', () => {
  test.beforeEach(async ({ page, request }) => {
    // Verificar estado del servidor antes de cada test
    const serverOk = await checkServerStatus(page, request, { 
      timeout: 5000, 
      failOnError: false 
    });
    
    if (!serverOk) {
      throw new Error('‚ùå El servidor no est√° disponible en el puerto 3001');
    }
    
    // Navegar a la p√°gina principal
    await page.goto(`${process.env.BASE_URL || 'http://localhost:3001'}`);
    
    // Verificar que la p√°gina carg√≥ correctamente
    const pageLoaded = await checkPageLoad(page);
    if (!pageLoaded) {
      throw new Error('‚ùå La p√°gina no carg√≥ correctamente');
    }
  });

  test('volunteer should not see assign users to shifts button', async ({ page }) => {
    console.log('üß™ [INICIANDO] Verificar permisos de voluntario - bot√≥n asignar turnos');
    
    // Iniciar sesi√≥n como voluntario
    const loginSuccess = await loginUser(page, {
      userType: 'VOLUNTARIO',
      checkRedirect: true,
      expectedRedirectUrl: /\/schedule$/,
      timeout: 10000
    });
    
    if (!loginSuccess) {
      console.log('‚ùå [FALL√ì] Verificar permisos de voluntario | Error: No se pudo completar el login');
      throw new Error('Login como voluntario fall√≥');
    }
    
    // Esperar a que cargue el contenido de la programaci√≥n
    await page.waitForSelector('text="Mis turnos"', { timeout: 10000, state: 'visible' });
    await page.waitForTimeout(2000); // Esperar a que se carguen todos los elementos
    
    // Verificar que el bot√≥n de asignar usuarios a turnos no est√° visible
    const hasAssignButton = await findAssignButton(page, { timeout: 3000 });
    
    if (hasAssignButton) {
      console.log('‚ùå [FALL√ì] Verificar permisos de voluntario | Error: El voluntario puede ver el bot√≥n de asignar turnos');
      throw new Error('El voluntario no deber√≠a ver el bot√≥n de asignar turnos');
    }
    
    // Tambi√©n verificar que no hay iconos PersonAdd
    const addUserButtons = page.locator('[data-testid="PersonAddIcon"], svg[data-testid="PersonAddIcon"]');
    await expect(addUserButtons).toHaveCount(0);
    
    // Verificar que no hay tooltips de "A√±adir usuario a este turno"
    const addUserTooltips = page.locator('text="A√±adir usuario a este turno"');
    await expect(addUserTooltips).toHaveCount(0);
    
    console.log('‚úÖ [CORRECTO] Verificar permisos de voluntario - bot√≥n asignar turnos');
  });

  test('responsible should not see assign users to shifts button', async ({ page }) => {
    console.log('üß™ [INICIANDO] Verificar permisos de responsable - bot√≥n asignar turnos');
    
    // Iniciar sesi√≥n como responsable
    const loginSuccess = await loginUser(page, {
      userType: 'RESPONSABLE',
      checkRedirect: true,
      expectedRedirectUrl: /\/schedule$/,
      timeout: 10000
    });
    
    if (!loginSuccess) {
      console.log('‚ùå [FALL√ì] Verificar permisos de responsable | Error: No se pudo completar el login');
      throw new Error('Login como responsable fall√≥');
    }
    
    // Esperar a que cargue el contenido de la programaci√≥n
    await page.waitForSelector('text="Mis turnos"', { timeout: 10000, state: 'visible' });
    await page.waitForTimeout(2000); // Esperar a que se carguen todos los elementos
    
    // Verificar que el bot√≥n de asignar usuarios a turnos no est√° visible
    const hasAssignButton = await findAssignButton(page, { timeout: 3000 });
    
    if (hasAssignButton) {
      console.log('‚ùå [FALL√ì] Verificar permisos de responsable | Error: El responsable puede ver el bot√≥n de asignar turnos');
      throw new Error('El responsable no deber√≠a ver el bot√≥n de asignar turnos');
    }
    
    // Tambi√©n verificar que no hay iconos PersonAdd
    const addUserButtons = page.locator('[data-testid="PersonAddIcon"], svg[data-testid="PersonAddIcon"]');
    await expect(addUserButtons).toHaveCount(0);
    
    // Verificar que no hay tooltips de "A√±adir usuario a este turno"
    const addUserTooltips = page.locator('text="A√±adir usuario a este turno"');
    await expect(addUserTooltips).toHaveCount(0);
    
    console.log('‚úÖ [CORRECTO] Verificar permisos de responsable - bot√≥n asignar turnos');
  });
});